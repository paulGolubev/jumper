import brl.blitz
TThread^brl.blitz.Object{
._running%&
._handle%&
._result:Object&
._entry:Object(data:Object)&
._data:Object&
-New%()="_brl_threads_TThread_New"
-Detach%()="_brl_threads_TThread_Detach"
-Wait:Object()="_brl_threads_TThread_Wait"
-Running%()="_brl_threads_TThread_Running"
+Create:TThread(entry:Object(data:Object),data:Object)="_brl_threads_TThread_Create"
+Main:TThread()="_brl_threads_TThread_Main"
+Current:TThread()="_brl_threads_TThread_Current"
+_EntryStub:Object(data:Object)="_brl_threads_TThread__EntryStub"
-Delete%()="_brl_threads_TThread_Delete"
}="brl_threads_TThread"
TThreadData^brl.blitz.Object{
._handle%&
-New%()="_brl_threads_TThreadData_New"
-SetValue%(value:Object)="_brl_threads_TThreadData_SetValue"
-GetValue:Object()="_brl_threads_TThreadData_GetValue"
+Create:TThreadData()="_brl_threads_TThreadData_Create"
}="brl_threads_TThreadData"
TMutex^brl.blitz.Object{
._handle%&
-New%()="_brl_threads_TMutex_New"
-Close%()="_brl_threads_TMutex_Close"
-Lock%()="_brl_threads_TMutex_Lock"
-TryLock%()="_brl_threads_TMutex_TryLock"
-Unlock%()="_brl_threads_TMutex_Unlock"
+Create:TMutex()="_brl_threads_TMutex_Create"
-Delete%()="_brl_threads_TMutex_Delete"
}="brl_threads_TMutex"
TSemaphore^brl.blitz.Object{
._handle%&
-New%()="_brl_threads_TSemaphore_New"
-Close%()="_brl_threads_TSemaphore_Close"
-Wait%()="_brl_threads_TSemaphore_Wait"
-Post%()="_brl_threads_TSemaphore_Post"
+Create:TSemaphore(count%)="_brl_threads_TSemaphore_Create"
-Delete%()="_brl_threads_TSemaphore_Delete"
}="brl_threads_TSemaphore"
TCondVar^brl.blitz.Object{
._handle%&
-New%()="_brl_threads_TCondVar_New"
-Close%()="_brl_threads_TCondVar_Close"
-Wait%(mutex:TMutex)="_brl_threads_TCondVar_Wait"
-Signal%()="_brl_threads_TCondVar_Signal"
-Broadcast%()="_brl_threads_TCondVar_Broadcast"
+Create:TCondVar()="_brl_threads_TCondVar_Create"
-Delete%()="_brl_threads_TCondVar_Delete"
}="brl_threads_TCondVar"
CreateThread:TThread(entry:Object(data:Object),data:Object)="brl_threads_CreateThread"
MainThread:TThread()="brl_threads_MainThread"
CurrentThread:TThread()="brl_threads_CurrentThread"
DetachThread%(thread:TThread)="brl_threads_DetachThread"
WaitThread:Object(thread:TThread)="brl_threads_WaitThread"
ThreadRunning%(thread:TThread)="brl_threads_ThreadRunning"
CreateThreadData:TThreadData()="brl_threads_CreateThreadData"
SetThreadDataValue%(data:TThreadData,value:Object)="brl_threads_SetThreadDataValue"
GetThreadDataValue:Object(data:TThreadData)="brl_threads_GetThreadDataValue"
CreateMutex:TMutex()="brl_threads_CreateMutex"
CloseMutex%(mutex:TMutex)="brl_threads_CloseMutex"
LockMutex%(mutex:TMutex)="brl_threads_LockMutex"
TryLockMutex%(mutex:TMutex)="brl_threads_TryLockMutex"
UnlockMutex%(mutex:TMutex)="brl_threads_UnlockMutex"
CreateSemaphore:TSemaphore(count%)="brl_threads_CreateSemaphore"
CloseSemaphore%(semaphore:TSemaphore)="brl_threads_CloseSemaphore"
WaitSemaphore%(semaphore:TSemaphore)="brl_threads_WaitSemaphore"
PostSemaphore%(semaphore:TSemaphore)="brl_threads_PostSemaphore"
CreateCondVar:TCondVar()="brl_threads_CreateCondVar"
CloseCondVar%(condvar:TCondVar)="brl_threads_CloseCondVar"
WaitCondVar%(condvar:TCondVar,mutex:TMutex)="brl_threads_WaitCondVar"
SignalCondVar%(condvar:TCondVar)="brl_threads_SignalCondVar"
BroadcastCondVar%(condvar:TCondVar)="brl_threads_BroadcastCondVar"
CompareAndSwap%(target% Var,oldValue%,newValue%)="brl_threads_CompareAndSwap"
AtomicAdd%(target% Var,value%)="brl_threads_AtomicAdd"
AtomicSwap%(target% Var,value%)="brl_threads_AtomicSwap"
